package com.ld.word.config.jwt;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.ld.word.config.auth.PrincipalDetail;
import com.ld.word.model.User;
import com.ld.word.repository.UserRepository;

// 시큐리티가 filter 가지고 있는데 그 필터중에 BasicAuthenticationFilter 라는 것이 있음
// 권한이나 인증이 필요한 특정 주소를 요청했을 때 위 필터를 무조건 타게 되어있음.
// 만약에 권한이나 인증이 필요한 주소가 아니라면 이 필터를 안탐
public class JwtAuthorizationFilter extends BasicAuthenticationFilter {
	
	private UserRepository userRepository;

	public JwtAuthorizationFilter(AuthenticationManager authenticationManager, UserRepository userRepository) {
		super(authenticationManager);
		// TODO Auto-generated constructor stub
		this.userRepository = userRepository;
	}
	
	// 인증이나 권한이 필요한 주소요청이 있을 때 해당 필터를 타게 됨.
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		// TODO Auto-generated method stub		
		System.out.println("권한이나 인증이 필요한 주소 요청됨");
		
		String jwtHeader = request.getHeader("ACCESS_TOKEN");
		System.out.println("jwtHeader ---> " + jwtHeader);
		
		// header 가 있는지 확인
		if(jwtHeader == null || !jwtHeader.startsWith("Bearer")) {
			chain.doFilter(request, response);
			return;
		}
		
		// JWT 토큰을 검증을 해서 정상적인 사용자인지 확인
		String jwtToken = request.getHeader("ACCESS_TOKEN").replace("Bearer ", "");
		System.out.println("jwtToken ---> " + jwtToken);
		String username = JWT.require(Algorithm.HMAC256("mySecretKey")).build().verify(jwtToken).getClaim("username").asString();
		System.out.println("username ---> " + username);
		// 서명이 정상적으로 됨
		if(username != null) {
			User user = userRepository.findByUsername(username);
			
			PrincipalDetail principalDetail = new PrincipalDetail(user);
			
			// Jwt 토큰 서명을 통해서 서명이 정상이면 Authentication 객체를 만들어 준다.
			Authentication authentication = 
					new UsernamePasswordAuthenticationToken(principalDetail, null, principalDetail.getAuthorities());
			
			// 강제로 시큐리티의 세션에 접근하여 Authentication 객체를 저장.
			SecurityContextHolder.getContext().setAuthentication(authentication);
		}
		
		chain.doFilter(request, response);
	}
	
	
}
