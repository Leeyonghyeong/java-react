package com.ld.word.config.jwt;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ld.word.config.auth.PrincipalDetail;
import com.ld.word.model.User;

import lombok.RequiredArgsConstructor;

// 스프링 시큐리티에서 UsernamePasswordAuthenticationFilter 가 있음.
// /login 요청해서 username, password 전송하면(post)
// UsernamePasswordAuthenticationFilter 가 동작을 함
// 현재는 formLogin().disable 되있어서 동작 안함
// scurityconfig 에서 addfilter 로 동작 하게 함
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends UsernamePasswordAuthenticationFilter{
	
	private final AuthenticationManager authenticationManager;
	
	// /login 요청을 하면 로그인 시도를 위해서 실행되는 함수
	@Override
	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
			throws AuthenticationException {
		// TODO Auto-generated method stub
		System.out.println("JwtAuthenticationFilter : 로그인 시도중");
		
		// 1. username, password 받아서
		try {
			ObjectMapper om = new ObjectMapper();
			User user = om.readValue(request.getInputStream(), User.class);
			System.out.println("JwtAuthenticationFilter -> " + user); 
			
			UsernamePasswordAuthenticationToken authenticationToken = 
					new UsernamePasswordAuthenticationToken(user.getUsername(), user.getPassword());
			
			// PrincipalDetailService의 loadUserByUsername() 함수가 실행된 후 정상이면 authentication이 리턴됨.
			// DB에 있는 username과 password가 일치한다.
			Authentication authentication = 
					authenticationManager.authenticate(authenticationToken);
			
			// authentication 객체가 session 영역에 저장됨 => 로그인이 되었다는 뜻.
			PrincipalDetail principalDetail = (PrincipalDetail) authentication.getPrincipal();
			System.out.println("로그인 완료됨 : " + principalDetail.getUser().getUsername());
			// authentication 객체가 session영역에 저장을 해야 하고 그 방법이 return 해주면 됨.
			// 리턴의 이유는 권한 관리를 security가 대신 해주기 때문에 편하려고 하는거임.
			// 굳이 JWT 토큰을 사용하면서 세션을 만들 이유가 없음. 근데 단지 권한 처리때문에 session 넣어 준다.
			return authentication;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// 2. 정상인지 로그인 시도. authenticationManager로 로그인 시도를 하면 PrincipalDetailService 호출 loadUserByUsername() 함수 실행됨
		
		// 3. PrincipalDetail를 세션에 담고
		
		// 4. JWT토큰을 만들어서 응답해줌
		return null;
	}
	
	// attemptAuthentication 실행 후 인증이 정상적으로 되었으면 successfulAuthentication 함수가 실행
	// JWT토큰을 만들어서 request요청한 사용자에게 JWT토큰을 response 해주면 됨.
	@Override
	protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain,
			Authentication authResult) throws IOException, ServletException {
		// TODO Auto-generated method stub
		System.out.println("successfulAuthentication 실행됨 : 인증 완료");
		
		PrincipalDetail principalDetail = (PrincipalDetail) authResult.getPrincipal();
		
		// RSA 방식은 아니구 Hash암호방식
		String jwtToken = JWT.create()
				.withSubject("ACCESS_TOKEN")
				.withExpiresAt(new Date(System.currentTimeMillis() + (1000 * 60 * 60 * 24 * 365)))
				.withClaim("id",  principalDetail.getUser().getId())
				.withClaim("username", principalDetail.getUser().getUsername())
				.sign(Algorithm.HMAC256("mySecretKey"));
		
		Cookie cookie = new Cookie("access_token", jwtToken);
		cookie.setMaxAge(60 * 60 * 24 * 365); 
		cookie.setPath("/");
		
		//response.addHeader("ACCESS_TOKEN", "Bearer " + jwtToken);
		response.addCookie(cookie);
		PrintWriter writer = response.getWriter();
		writer.println("{'id':'" + principalDetail.getUser().getId() + "', 'username':'" + principalDetail.getUser().getUsername() + "'");
		
	}
}
